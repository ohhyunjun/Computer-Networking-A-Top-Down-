1. 응용계층(단위 : 메시지)
	- client: 서비스를 요청함(웹에선 브라우저, 메일 리더), server : 요청받은 서비스 제공(웹에선 서버, 메일서버)
	- 프로토콜: HTTP(WEB), FTP(파일전송), SMTP(전자우편 보냄), POP3/IMAP(전자우편 추출), DNS
	-soket API: host의 응용 계층과 전송계층 사이에 프로그래머가 네트워크 통신을 구현하도록 도와주는 표준화된 프로그래밍 인터페이스이다.
		= 소켓: 프로세스가 자신의 메시지를 네트워크로 보내거나 네트워크로 부터 메시지를 받을 수 있는 '문'

2. Web and HTTP
	- 프로세스: 호스트내에서 실행되는 프로그램(네트워크를 통해 메시지 송수신하기 위해 소켓 사용함. = soket API)
		= 프로세스가 메시지를 수신하려면 호스트가 가진 IP 뿐만 아니라 포트번호가 필요함. ex : HTTP = 80, Mail server = 25
		= 동일한 호스트에서 두개의 프로세스가 통신함(OS에 의해)
		= 서로 다른 호스트에서의 프로세스도 통신함(어플리케이션 계층 프로토콜에 의해)
	- user agent: 사용자와 네트워크 사이의 인터페이스
		= Web: browser, E-mail: mail reader, streaming audio/video: media player
	
 	- 어플리케이션: 분산된 프로세스들이 통신을 통해 서로 상호 작용(호스트에서) ex 이메일, 웹, P2P....
	- 어플리케이션 계층 프로토콜: 응용 프로그램 간에 교환되는 메시지와 메시지를 받았을 때 취해야 할 행동들을 정의함. 이러한 프로토콜은 하위 계층 프로토콜(TCP, UDP 등)이 제공하는 통신 서비스를 사용함.
		= Public_domain protocols(공개 도메인 프로토콜): RFCs(요청에 대한 의견)에 정의되어 있으며, HTTP, SMTP와 같은 프로토콜이 이에 해당
	-TCP: end host들 사이에서 커넥션 역할을 한다. (장점:연결 지향적(핸드쉐이킹), 신뢰성 전송, 흐름/혼잡제어,  단점: 타이밍, 최소한의 대역폭 제공 안함). [이메일, 리모트 터미널 접근, 웹, 파일전송, 스트리밍]
	-UDP: 비연결성, 신뢰성 없는 전송[스트리밍, 인터넷 전화]
	
3. Web and HTTP
	- 웹페이지는 객체로 구성됨,  웹페이지는 HTML-file로 구성됨, 각 객체는 URL로 주소 지정 가능. ex www.someschool.edu/someDept/pic/gif : www~edu 호스트이름, 나머지는 경로 이름
	- HTTP: 웹 클라이언트(브라우저)가 웹 서버에게 어떻게 요청하고 서버는 어떻게 전송하는지 정의한다, 지난 사용자의 정보를 저장 하지 않는다(서버의 복잡성과 리소스 사용을 줄임). TCP를 이용한다
		=  클라이언트가 서버의 IP 주소와 80번 포트로 TCP 소켓 연결을 시작합니다. =>연결이 수립되면, 클라이언트는 HTTP 요청 메시지를 서버에 보냅니다. =>서버는 요청을 처리하고 적절한 HTTP 응답 메시지를 반환합니다. =>데이터 전송이 완료된 후, TCP 연결은 종료됩니다.
	- RTT: 클라이언트가 작은 패킷을 서버로 보내고 다시받는 시간.
		= 첫번째 RTT는 TCP 커넥션을 위해, 두번째 RTT는 HTTP요청과 회신을 위해. 즉 총 2RTT+ 전송시간
	- Cookie: 정보저장
		=  HTTP응답 메시지의 쿠키 헤더, HTTP요청 메시지의 쿠키 헤더, 쿠키는 사용자의 호스트에 저장되고 브라우저에서 관리함, 사이트는 백엔드 데이터베이스 생성
		= 클라이언트: http 요청메시지->서버내에서 id 123생성->서버: http 응답 + set-cookie123->일반적인 http요청 메시지+cookie123 ....
	- FTP: 네트워크를 통해 파일을 전송하기 위한 표준 프로토콜.
		= 클라이언트-서버 모델, 포트 21
		= client는 FTP 서버에 접속 후 TCP 프로토콜 지정->클라이언트 제어 연결 승인 획득 후 제어 연결로 명령을 전송하여 원격 디렉토리 탐색-> 서버는 전송명령 받으면 client에 TCP 데이터 연결을 염 -> 파일 하나를 전송한 후 서버는 연결 닫음.
		= TCP제어 연결 포트 21과, TCP데이터 연결 포트 20으로 서버는 다른 파일을 전송하기 위해 두번째 TCP 데이터 연결

4. Electronic Mail
	-  user agent
	- 메일 서버: 메일을 저장하고, 전송하며, 받는 역할. (프로토콜: SMTP, POP3, IMAP)
	- 사용자가 메일 작성 후 전송하면 user agent는 메일을 메일서버로(SMTP이용) 보낸 후 그 메일은 출력 메시지 큐에 놓이게 됨. 이후 SMTP를 통해 수신자 메일 서버로 보냄(TCP 연결을 통해). 수신자의 메일 서버는 해당 메일을 메일 박스에 저장하였다가 수신자가 POP3 혹은 IMAP을 이용하여 메일 박스에서 메시지를 가져온다.
	- TCP를 사용함. 포트 25
		= 핸드쉐이킹->메시지 보냄 -> 문 닫음
	- SMTP: push 프로토콜로 송신자 메일을 서버로 보내기 위해(HTTP: pull 프로토콜로 정보를 가져오기 위해) 

5. DNS
	= 호스트 이름을 IP 주소로 변환해주는 디렉터리 서비스가 DNS 주 임무
	= 분산 데이터베이스, 애플리케이션 계층 프로토콜
		= 중앙 집붕데이터베이스일 경우 확장성이 힘들고 서버 고장등의 위험이 있어 분산되도록 설계됨.
	= local name server(사용자가 웹사이트를 방문하려고 할 때, 그의 컴퓨터는 먼저 로컬 DNS 서버에 도메인 이름을 IP 주소로 변환해 달라고 요청함)
	= authoritative name server(특정 도메인에 대한 권한을 가지고 있습니다. 이 서버는 도메인에 대한 최종적이고 정확한 데이터를 보유하고 있으며, 해당 도메인의 IP 주소 등의 정보를 제공)
	= root name server(DNS 계층 구조의 최상위에 위치, 상위 도메인(TLD: .com, .org) 서버들의 주소를 알려주는 역할)

6. soket with TCP
	= TCP는 10개의 소켓에 1을 더한 11개의 소켓이 필요
	












